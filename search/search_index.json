{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ModVis","text":"<p>A python package for model visualization.</p> <ul> <li>Free software: GPL license</li> <li>Documentation: https://pinshuai.github.io/modvis</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Visualize model outputs from hydrologic models including ATS, PFLOTRAN, and etc.</li> <li>Plot unstructured meshes with variables such as groundwater table, saturation, and evapotranspiration.</li> <li>Evaluate model performance using different metrics.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p><code>ModVis</code> is available on PyPI. To install, run the following command:</p> <pre><code>pip install modvis\n</code></pre> <p>If you want to run the latest version of the code, you can install from git:</p> <pre><code>pip install -U git+https://github.com/pinshuai/modvis.git\n</code></pre> <p>Alternatively, if you want to debug and test the code, you can clone the repository and install from source:</p> <pre><code>git clone https://github.com/pinshuai/modvis.git\ncd modvis\npip install -e .\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":""},{"location":"#plot-variables-on-triangular-meshes","title":"Plot variables on triangular meshes:","text":"<pre><code>import modvis.ats_xdmf as xdmf\nimport modvis.plot_vis_file as pv\n\n# import visdump file\nsurface_vis = xdmf.VisFile(model_dir='.', domain='surface')\nsubsurface_vis = xdmf.VisFile(model_dir='.', domain=None, columnar=True)\n\n# plot surface ponded depth\npv.plot_surface_data(surface_vis, var_name=\"surface-ponded_depth\", log=True,\n                              time_slice=\"2019-05-01\", vmin=0.01, vmax=4)\n\n# plot subsurface saturation. Note layer index is ordered from top to bottom (0--top).\npv.plot_layer_data(subsurface_vis, var_name = \"saturation_liquid\", \n                             layer_ind = 0, time_slice= 0,\n                              cmap = \"coolwarm\")\n</code></pre>"},{"location":"#plot-variables-on-mixed-element-meshes","title":"Plot variables on mixed-element meshes:","text":"<pre><code>import modvis.ats_xdmf as xdmf\nimport modvis.plot_vis_file as pv\n\n# import visdump file\nsurface_vis = xdmf.VisFile(model_dir='.', domain='surface', mixed_element=True)\nsubsurface_vis = xdmf.VisFile(model_dir='.', domain=None, mixed_element=True)\n\n# plot surface ponded depth\npv.plot_surface_data(surface_vis, var_name=\"surface-ponded_depth\", \n                              time_slice=\"2019-05-01\", mixed_element=True)\n\n# plot subsurface saturation. Note layer index is ordered from top to bottom (0--top).\npv.plot_layer_data(subsurface_vis, var_name = \"saturation_liquid\", \n                             layer_ind = 0, time_slice= 0, mixed_element=True)\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>Jupyter notebook examples can be found under examples/notebooks</p>"},{"location":"#how-to-cite","title":"How to cite?","text":"<p>Pin Shuai, Rathore, S., &amp; Coon, E. (2025). pinshuai/modvis: ModVis v0.0.9 (v0.0.9). Zenodo. https://doi.org/10.5281/zenodo.17073812</p>"},{"location":"#credits","title":"Credits","text":"<p>This work is supported by LDRD funding from PNNL, with continuing support from the Utah Water Research Laboratory.</p> <p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v009-september-7-2025","title":"v0.0.9 - September 7, 2025","text":"<p>This release includes new visualization capability for mixed element meshes (thanks to Saubhagya Rathore@ORNL!). Note this is still work in progress and package will be updated to include more plotting functions.</p>"},{"location":"changelog/#whats-changed","title":"What's Changed","text":"<ul> <li>Added visualization for mixed element meshes by @pinshuai in https://github.com/pinshuai/modvis/pull/4</li> <li>Updated nwis function</li> <li>updated license from MIT to GNU GPL</li> <li>fixed a few bugs in loading meshes</li> </ul>"},{"location":"changelog/#v008-july-16-2024","title":"v0.0.8 - July 16, 2024","text":"<p>In this release, edits to two functions are made: plot_column_data() and plot_column_head(). A new argument was added to allow inferring column ids from cell ids. This is convenient when column ids cannot be easily obtained.</p>"},{"location":"changelog/#v007-july-27-2023","title":"v0.0.7 - July 27, 2023","text":"<ul> <li>Updated VisFile class to work with ats version &gt;1.5</li> <li>Merged ats_xdmf.py from ats repo</li> </ul>"},{"location":"changelog/#v003-may-18-2022","title":"v0.0.3 - May 18, 2022","text":"<p>Improvements</p> <ul> <li>Clean up the requirements.txt to make all dependencies installable through <code>pip</code></li> <li>All examples now works with the <code>import modvis</code> statement</li> </ul>"},{"location":"changelog/#v002-may-18-2022","title":"v0.0.2 - May 18, 2022","text":"<p>Clean up the load visfile function to make the workflow much cleaner.</p>"},{"location":"changelog/#v001-may-2-2022","title":"v0.0.1 - May 2, 2022","text":"<p>First release of the package.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/pinshuai/modvis/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>ModVis could always use more documentation, whether as part of the official ModVis docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/pinshuai/modvis/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up modvis for local development.</p> <ol> <li> <p>Fork the modvis repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/modvis.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv modvis\n$ cd modvis/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 modvis tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/pinshuai/modvis/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install ModVis, run this command in your terminal:</p> <pre><code>pip install modvis\n</code></pre> <p>This is the preferred method to install ModVis, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for ModVis can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/pinshuai/modvis\n</code></pre>"},{"location":"modvis/","title":"modvis module","text":"<p>Main module.</p>"},{"location":"usage/","title":"Usage","text":"<p>Below is a list of functions available in <code>modvis</code>.</p>"},{"location":"usage/#mixed-element-mesh-visualization","title":"Mixed-element mesh visualization","text":"<ul> <li>import visdump file</li> </ul> <pre><code>surface_vis = xdmf.VisFile(model_dir='.', domain='surface', mixed_element=True)\nsubsurface_vis = xdmf.VisFile(model_dir='.', domain=None, mixed_element=True)\n</code></pre> <ul> <li>plot surface ponded depth</li> </ul> <pre><code>pv.plot_surface_data(surface_vis, var_name=\"surface-ponded_depth\", \n                              time_slice=\"2019-05-01\", mixed_element=True)\n</code></pre> <ul> <li>plot subsurface saturation. Note layer index is ordered from top to bottom (0--top).</li> </ul> <pre><code>pv.plot_layer_data(subsurface_vis, var_name = \"saturation_liquid\", \n                             layer_ind = 0, time_slice= 0, mixed_element=True)\n</code></pre>"},{"location":"usage/#trianglular-mesh-visualization-default","title":"Trianglular mesh visualization (default)","text":"<ul> <li>To load visdump file:</li> </ul> <p>Note</p> <p>For subsurface, use <code>domain=None</code> because it load subsurface by default. <code>columnar=True</code> is required for reordering the cells to column-based for easy plotting. </p> <pre><code>import modvis\n# load subsurface visfile\nmodvis.ats_xdmf.VisFile(model_dir='.', domain=None, load_mesh=True, columnar=True)\n\n# load surface visfile\nmodvis.ats_xdmf.VisFile(model_dir='.', domain='surface', load_mesh=True)\n</code></pre> <ul> <li>To plot surface ponded depth:</li> </ul> <p>Note</p> <p>You can use either numbering (0,1,2...) or datetime string (e.g., \"2015-10-01\") for the <code>time_slice</code>.</p> <pre><code>modvis.plot_vis_file.plot_surface_data(visfile, var_name=\"surface-ponded_depth\",\n                time_slice=0)\n</code></pre> <ul> <li>To plot subsurface saturation at the top layer:</li> </ul> <pre><code>modvis.plot_vis_file.plot_layer_data(visfile, var_name = \"saturation_liquid\", \n                             layer_ind = 0, time_slice= \"2015-10-01\")\n</code></pre> <ul> <li>To plot flow duration curve</li> </ul> <pre><code>modvis.general_plots.plot_FDC(dfs, labels, colors)\n</code></pre> <ul> <li>To plot one-to-one scatter plot with metrics</li> </ul> <pre><code>modvis.general_plots.one2one_plot(obs_df, simu_df, metrics=['KGE'])\n</code></pre>"},{"location":"notebooks/model_evaluation/","title":"Model evaluation","text":"In\u00a0[\u00a0]: Copied! <pre># skip this if package has already been installed\n!pip install modvis\n</pre> # skip this if package has already been installed !pip install modvis In\u00a0[1]: Copied! <pre>from modvis import ATSutils\nfrom modvis import utils\nfrom modvis import general_plots as gp\n\nimport matplotlib.pyplot as plt\n\nmodel_dir = \"../data/coalcreek\"\n</pre> from modvis import ATSutils from modvis import utils from modvis import general_plots as gp  import matplotlib.pyplot as plt  model_dir = \"../data/coalcreek\" <p>Download the sample data when running on <code>Google Colab</code></p> In\u00a0[2]: Copied! <pre># import os\n# if not os.path.exists(model_dir):\n#   !git clone https://github.com/pinshuai/modvis.git\n#   %cd ./modvis/examples/notebooks\n</pre> # import os # if not os.path.exists(model_dir): #   !git clone https://github.com/pinshuai/modvis.git #   %cd ./modvis/examples/notebooks In\u00a0[3]: Copied! <pre>simu_df = ATSutils.load_waterBalance(model_dir, WB_filename=\"water_balance-daily.dat\",\n                                plot = True)\n</pre> simu_df = ATSutils.load_waterBalance(model_dir, WB_filename=\"water_balance-daily.dat\",                                 plot = True) In\u00a0[4]: Copied! <pre>obs_df = utils.load_nwis(sites= \"09111250\", start = '2014-10-01')\n</pre> obs_df = utils.load_nwis(sites= \"09111250\", start = '2014-10-01') In\u00a0[5]: Copied! <pre>obs_df.plot()\n</pre> obs_df.plot() Out[5]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[6]: Copied! <pre>fig,ax = plt.subplots(1,1, figsize=(8,4))\nsimu_df['watershed boundary discharge [m^3/d]'].plot(color = 'c',ax=ax, label= \"simu_Q\")\nobs_df['Discharge [m^3/d]'].plot(color = 'k', ax=ax, label = \"obs_Q\")\nax.set_ylabel(\"Discharge [m^3/d]\")\nax.legend()\n</pre> fig,ax = plt.subplots(1,1, figsize=(8,4)) simu_df['watershed boundary discharge [m^3/d]'].plot(color = 'c',ax=ax, label= \"simu_Q\") obs_df['Discharge [m^3/d]'].plot(color = 'k', ax=ax, label = \"obs_Q\") ax.set_ylabel(\"Discharge [m^3/d]\") ax.legend() Out[6]: <pre>&lt;matplotlib.legend.Legend at 0x7fd7c97556f0&gt;</pre> In\u00a0[7]: Copied! <pre>fig, ax = gp.plot_FDC(dfs=[obs_df['Discharge [m^3/d]'], simu_df['watershed boundary discharge [m^3/d]']],\n           labels=['obs_Q','simu_Q'], \n           colors=['k', 'c'],\n           start_date=\"2016-10-01\" \n           )\n</pre> fig, ax = gp.plot_FDC(dfs=[obs_df['Discharge [m^3/d]'], simu_df['watershed boundary discharge [m^3/d]']],            labels=['obs_Q','simu_Q'],             colors=['k', 'c'],            start_date=\"2016-10-01\"             ) In\u00a0[8]: Copied! <pre>gp.one2one_plot(obs_df['Discharge [m^3/d]'], simu_df['watershed boundary discharge [m^3/d]'],\n               metrics=['R^2', 'NSE', 'mKGE'],\n                # metrics='all',\n               show_density=False,\n                start_date=\"2016-10-01\"\n               )\n</pre> gp.one2one_plot(obs_df['Discharge [m^3/d]'], simu_df['watershed boundary discharge [m^3/d]'],                metrics=['R^2', 'NSE', 'mKGE'],                 # metrics='all',                show_density=False,                 start_date=\"2016-10-01\"                ) Out[8]: <pre>{'R^2': 0.8721059035985849,\n 'NSE': 0.8386136492066862,\n 'mKGE': 0.7947371500678737}</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/model_evaluation/#model-evaluation","title":"Model evaluation\u00b6","text":"<p>This example shows how to load model and observation data and evalute model performance.</p>"},{"location":"notebooks/model_evaluation/#load-model-data","title":"Load model data\u00b6","text":"<p>This will load the <code>water_balance-daily.dat</code> file generated from ATS model. The data file includes watershed variables including outlet discharge, ET, and etc.</p>"},{"location":"notebooks/model_evaluation/#load-observation-data","title":"Load observation data\u00b6","text":""},{"location":"notebooks/model_evaluation/#streamflow-comparison","title":"Streamflow comparison\u00b6","text":"<p>Compare simulated streamflow with observed USGS streamflow.</p>"},{"location":"notebooks/model_evaluation/#fdc-comparison","title":"FDC comparison\u00b6","text":"<p>Compare the simulated vs. observed flow duration curve.</p>"},{"location":"notebooks/model_evaluation/#one-to-one-plot","title":"One-to-one plot\u00b6","text":"<p>One to one scatter plot with metrics.</p>"},{"location":"notebooks/plot_subsurface/","title":"Plot subsurface variables","text":"In\u00a0[1]: Copied! <pre># skip this if package has already been installed\n!pip install modvis\n</pre> # skip this if package has already been installed !pip install modvis In\u00a0[2]: Copied! <pre>import numpy as np\nimport modvis.ats_xdmf as xdmf\nimport modvis.plot_vis_file as pv\n\nmodel_dir = \"../data/coalcreek\"\n</pre> import numpy as np import modvis.ats_xdmf as xdmf import modvis.plot_vis_file as pv  model_dir = \"../data/coalcreek\" <p>Download the sample data when running on <code>Google Colab</code></p> In\u00a0[3]: Copied! <pre>import os\nif not os.path.exists(model_dir):\n  !git clone https://github.com/pinshuai/modvis.git\n  %cd ./modvis/examples/notebooks\n</pre> import os if not os.path.exists(model_dir):   !git clone https://github.com/pinshuai/modvis.git   %cd ./modvis/examples/notebooks In\u00a0[4]: Copied! <pre>visfile = xdmf.VisFile(model_dir, domain=None, load_mesh=True, columnar=True, ats_version=1.2)\n</pre> visfile = xdmf.VisFile(model_dir, domain=None, load_mesh=True, columnar=True, ats_version=1.2) In\u00a0[5]: Copied! <pre>fig, ax = pv.plot_column_data(visfile, var_name = \"saturation_liquid\", cmap = \"coolwarm\", \n                              col_ind=0)\n</pre> fig, ax = pv.plot_column_data(visfile, var_name = \"saturation_liquid\", cmap = \"coolwarm\",                                col_ind=0) In\u00a0[6]: Copied! <pre>fig, ax = pv.plot_layer_data(visfile, var_name = \"saturation_liquid\", \n                             layer_ind = 0, time_slice= \"2015-10-01\",\n                          cmap = \"coolwarm\")\n</pre> fig, ax = pv.plot_layer_data(visfile, var_name = \"saturation_liquid\",                               layer_ind = 0, time_slice= \"2015-10-01\",                           cmap = \"coolwarm\") In\u00a0[7]: Copied! <pre>ihead = pv.plot_column_head(visfile, col_ind = 0)\n</pre> ihead = pv.plot_column_head(visfile, col_ind = 0) In\u00a0[8]: Copied! <pre>fig, ax, tpc = pv.plot_gw_surface(visfile, time_slice = 0, contour = True, \n                                  contourline = True, nlevel = np.arange(2700,3665, 50), \n                                  colorbar = True,\n                                 )\n</pre> fig, ax, tpc = pv.plot_gw_surface(visfile, time_slice = 0, contour = True,                                    contourline = True, nlevel = np.arange(2700,3665, 50),                                    colorbar = True,                                  ) In\u00a0[9]: Copied! <pre>fig, ax, tpc = pv.plot_water_content(visfile, layer_ind = 0, \n                                     vmin = 0.1, vmax = 0.22, cmap = 'turbo',\n                                     time_slice=0)\n</pre> fig, ax, tpc = pv.plot_water_content(visfile, layer_ind = 0,                                       vmin = 0.1, vmax = 0.22, cmap = 'turbo',                                      time_slice=0) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/plot_subsurface/#plot-subsurface-variables","title":"Plot subsurface variables\u00b6","text":""},{"location":"notebooks/plot_subsurface/#import-vis-data","title":"import vis data\u00b6","text":""},{"location":"notebooks/plot_subsurface/#plot-subsurface-satuation","title":"plot subsurface satuation\u00b6","text":""},{"location":"notebooks/plot_subsurface/#single-column","title":"single column\u00b6","text":""},{"location":"notebooks/plot_subsurface/#single-layer","title":"single layer\u00b6","text":""},{"location":"notebooks/plot_subsurface/#plot-groundwater-table","title":"plot groundwater table\u00b6","text":""},{"location":"notebooks/plot_subsurface/#single-column","title":"single column\u00b6","text":""},{"location":"notebooks/plot_subsurface/#gw-surface","title":"GW surface\u00b6","text":""},{"location":"notebooks/plot_subsurface/#volumetric-water-content","title":"Volumetric water content\u00b6","text":""},{"location":"notebooks/plot_surface/","title":"Plot surface variables","text":"In\u00a0[\u00a0]: Copied! <pre># skip this if package has already been installed\n!pip install modvis\n</pre> # skip this if package has already been installed !pip install modvis In\u00a0[2]: Copied! <pre>import modvis.ats_xdmf as xdmf\nimport modvis.plot_vis_file as pv\n\nmodel_dir = \"../data/coalcreek\"\n</pre> import modvis.ats_xdmf as xdmf import modvis.plot_vis_file as pv  model_dir = \"../data/coalcreek\" <p>Download the sample data when running on <code>Google Colab</code></p> In\u00a0[3]: Copied! <pre>import os\nif not os.path.exists(model_dir):\n  !git clone https://github.com/pinshuai/modvis.git\n  %cd ./modvis/examples/notebooks\n</pre> import os if not os.path.exists(model_dir):   !git clone https://github.com/pinshuai/modvis.git   %cd ./modvis/examples/notebooks In\u00a0[4]: Copied! <pre>visfile = xdmf.VisFile(model_dir, domain='surface', load_mesh=True, ats_version=1.2)\n</pre> visfile = xdmf.VisFile(model_dir, domain='surface', load_mesh=True, ats_version=1.2) In\u00a0[5]: Copied! <pre>fig, ax, tpc = pv.plot_surface_data(visfile, var_name=\"surface-ponded_depth\", \n                                    log = True, vmin=0.01, vmax=4, \n                                    time_slice=0)\n</pre> fig, ax, tpc = pv.plot_surface_data(visfile, var_name=\"surface-ponded_depth\",                                      log = True, vmin=0.01, vmax=4,                                      time_slice=0) <pre>2022-05-18 16:06:57,549 - root - INFO: No unit convertion.\n</pre> In\u00a0[6]: Copied! <pre>fig, ax, tpc = pv.plot_surface_data(visfile, var_name=\"surface-total_evapotranspiration\", \n                                    log = False, vmin=0, vmax=3, \n                                    time_slice= \"2015-10-01\")\n</pre> fig, ax, tpc = pv.plot_surface_data(visfile, var_name=\"surface-total_evapotranspiration\",                                      log = False, vmin=0, vmax=3,                                      time_slice= \"2015-10-01\") In\u00a0[7]: Copied! <pre>fig, ax, tpc = pv.plot_surface_data(visfile, var_name=\"surface-area_fractions.cell.1\", \n                                    vmin=0, vmax=1, time_slice=0)\n</pre> fig, ax, tpc = pv.plot_surface_data(visfile, var_name=\"surface-area_fractions.cell.1\",                                      vmin=0, vmax=1, time_slice=0) <pre>2022-05-18 16:06:58,433 - root - INFO: No unit convertion.\n</pre>"},{"location":"notebooks/plot_surface/#plot-surface-variables","title":"Plot surface variables\u00b6","text":""},{"location":"notebooks/plot_surface/#import-vis-data","title":"import vis data\u00b6","text":""},{"location":"notebooks/plot_surface/#plot-surface-ponded-depth","title":"plot surface ponded depth\u00b6","text":""},{"location":"notebooks/plot_surface/#plot-et","title":"plot ET\u00b6","text":""},{"location":"notebooks/plot_surface/#plot-snow-cover","title":"plot snow cover\u00b6","text":""}]}